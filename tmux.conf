# Basics:
# Control + B is the leader key
# - c creates a window
# - 0-9, n and p switch windows
# - $ renames the session
# - , renames a window
# - | and _ create panes
# - } and { swap panes
# M-(direction) resizes panes - M is "meta" (alt/option on Mac)
# - z temporarily zooms a pane - see status bar indicator
# - : goes into command mode
# see also 
# - https://gist.github.com/MohamedAlaa/2961058
# -https://robots.thoughtbot.com/a-tmux-crash-course
#

# GENERAL SETTINGS #

# Enable mouse support for tmux >= 2.1
# (Earlier versions used `set -g mouse-mode on` and other options)
set -g mouse

# Use 256 colors
set -g default-terminal "screen-256color"

# Status prompt - control + a to beginning of line, etc
set -g status-keys "emacs"

# DISPLAY INFO AND COLORS #

set -g status-left-length 50
set -g status-right "#[fg=default,bold]#(whoami)@#H - #[fg=default,none]#(date '+%a, %b %d, %H:%M') - #[fg=default,bold]#(~/.dotfiles/bin/battery_percentage)%"
set -g status-right-length 80

# Highlight currently-active pane
set -g pane-border-bg black
set -g pane-border-fg white
set -g pane-active-border-bg black
set -g pane-active-border-fg blue
set -g window-style 'default'
set -g window-active-style 'bg=black'

# BINDINGS #

# reload config file with r
unbind r
bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Control + k clears the screen
# bind -n C-k send-keys C-l \; clear-history

# Create new windows in this directory
bind c new-window -c "#{pane_current_path}"

# When windows are closed or moved, renumber all
set-option -g renumber-windows on

# Size of scrollback buffer (careful - eats memory)
set-option -g history-limit 6000

# Shift left/right moves this window in the ordering
bind-key -n S-Left swap-window -t -1
bind-key -n S-Right swap-window -t +1

# Split panes in this directory using | and _
bind -r _ split-window    -c "#{pane_current_path}"
bind -r | split-window -h -c "#{pane_current_path}"

# clear the scrollback buffer with control-k
bind -n C-k clear-history \; display-message "clear-history"

# Move betwen panes with hjkl
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Move windows with control shift left/right
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# Move betwen panes with hjkl - go to extreme left/right/top/bot pane
# bind-key h select-pane -t left
# bind-key j select-pane -t down
# bind-key k select-pane -U
# bind-key l select-pane -t right

# Move one pane at a time, and wrap if you hit the edge.
# bind-key H select-pane -L
# bind-key J select-pane -D
# bind-key K select-pane -t up
# bind-key L select-pane -R

# Possible alternative: without the prefix; just control + thing
# bind-key -n C-h select-pane -L

# COPY AND PASTE
# Prefix+[ to start copy mode, vim keys to move, v to select, y to yank
# Requires `brew install reattach-to-user-namespace`
# http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
# For updates to tmux 2.4 see  https://github.com/tmux/tmux/issues/543#issuecomment-298193820
# For more info, run tmux list-keys -t vi-copy 

# Use vim keybindings in copy mode
setw -g mode-keys vi
unbind -T copy-mode-vi Enter
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi 'v' send -X begin-selection # Begin selection in copy mode.
# 'y' to yank
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# same if you stop dragging a mouse
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# Copy-paste broke in tmux when I updated to MacOS Sierra.
# I found this solution here: https://github.com/tmux/tmux/issues/543#issuecomment-248980734
# I don't understand it but it works. :( ¯\_(ツ)_/¯
set -g default-shell $SHELL
set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# Set the time in milliseconds for which tmux waits after an escape is input to
# determine if it is part of a function or meta key sequences. The default is 500
# milliseconds.
# This was useful for me in making kakoune more reponsive. It also helps vim
# but I hadn't noticed the delay there.
set -sg escape-time 25

# Lets Vim know that it has been focused again and should reload its file in
# case it has been changed from underneat it (eg by git checkout)
#set -g focus-events on
