[core]
  # This ignore file should be used for all repos
  excludesfile = ~/.gitignore

  # If I run 'git commit', open vim with simplified config.
  editor = vi -u "~/.vimrc_simple" # TODO maybe use --noplugin instead?
  autocrlf = input
  pager = /usr/local/share/git-core/contrib/diff-highlight/diff-highlight | less
[alias]
  # list all aliases :)
  alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | sort | less
  s = status
  # See https://git-scm.com/docs/pretty-formats
  l = log --pretty='format:%C(yellow)%h %m %C(yellow)%an %Creset%s%C(blue)%d %C(red)(%cr - %cd)%Creset'
  # "log graph-style"
  gl = log --graph --decorate --pretty='format:%C(yellow) %h%C(blue)%d%Creset %s%C(yellow) %m %an %m%C(red) (%cr)%Creset'
  # "full log"
  fl = log --pretty=full
  g = grep -i -n
  # List of files in git repo by number of commits in which they've changed
  churn = ! git log --pretty=format: --name-only | sort | uniq -c | sort -rg
  b = branch
  ba = branch -a
  bm = branch --merge
  bn = branch --no-merge
  bl = blame
  a = add
  d = diff
  wd = diff --word-diff
  dc = diff --cached
  c = commit -v
  co = checkout
  f = fetch --prune
  m = merge
  pl = pull
  ps = push
  psoh = push origin HEAD
  ss = stash save
  sl = stash list
  sa = stash apply
  sd = stash drop
  sp = stash pop
  sh = show --pretty=medium
  cl = clone
  v = ! gitx || gitg # visual
  # List branches by how recently they've been worked on
  recent = for-each-ref --sort='committerdate:iso8601' --format=' %(color:green)%(committerdate:iso8601)%09%(color:white)%(refname:short)' refs/heads

  recent-remote = for-each-ref --sort='committerdate:iso8601' --format=' %(color:green)%(committerdate:iso8601)%09%(color:white)%(refname:short)' refs/remotes
  tagdates = log --tags --simplify-by-decoration --pretty='format:%ai %d'
  history = log -G
  contributors = shortlog -s -n
  commits = log --left-right --graph --cherry-pick --oneline
  praise = blame # for high fives!
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
  submodules-please = submodule update --init --recursive
[color]
  ui = always
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22
[color "diff"]
  commit = green
  meta = yellow
  frag = cyan
  old = red
  new = green
  whitespace = red reverse
[help]
  autocorrect = 1
[status]
  submodule = 1
[apply]
 whitespace = nowarn
[push]
  # `git push origin` does current branch only
	default = simple
[merge]
  # In conflicts, show both changes AND their common ancestor
	conflictstyle = diff3
[user]
  # Name and email used for commits
  name = Nathan Long
  email = him@nathanmlong.com
[github]
  # Some tools connect to GitHub without SSH. To use these tools properly you
  # need to set these.
  # On the GitHub site Click “Account Settings” > Click “Account Admin.”
  # user = some_user
  # token = some_token
[hub]
	host = gh.fromatob.com
[rebase]
  # If I try to rebase and have uncommitted changes, stash them, rebase, and
  # pop the stash automatically
	autostash = true
[log]
  date = format:%Y-%m-%d
[submodule]
  # fetch submodules in parallel
	fetchJobs = 4
[pager]
  # don't pipe 'git branch' to 'less' - started happening by default in 2.16
	branch = false
[rerere]
  # "reuse recorded resolution" - after fixing a conflict, it's OK to
  # revert the merge; Git will be ready to fix the same conflict the same way.
  # https://git-scm.com/book/en/v2/Git-Tools-Rerere
  # https://hackernoon.com/fix-conflicts-only-once-with-git-rerere-7d116b2cec67
	enabled = true
