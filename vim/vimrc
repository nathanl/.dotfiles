" Canonical version of this file and of the .vim directory is in git
" at git@github.com:nathanl/dotfiles.git
" 
" **************** BASIC SETTINGS ******************  
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
" Captial Q does nothing (instead of entering Ex mode)
nnoremap Q <nop>

set encoding=utf-8
" Always use unix line breaks. Set to `unix,dos` when desiring to use whatever
" the file uses.
set fileformats=unix

" Make Y behave like other capitals - to end of line
map Y y$

" Don't use swap files
set noswapfile

" Put backup files in a central place instead of the current directory.
" Vim will use the first directory that exists.  (see `:help backup`)
set backupdir=/tmp/vim,/tmp,$HOME/Local\ Settings/Temp

" Discard undo history when reloading a file (like `:e!`). For instance,
" I may want to reload after committing and only be able to undo to that point.
try
  set undoreload=0 | edit
catch
  " Pre vim7.3
endtry

" Remove all autocommands, in case we are sourced twice.  That's what vim's
" help says to do if you use autocommands, so I'm doing it.
autocmd!

" Automatically reload files that have been changed by another program
" (unless there are unsaved changes). Handy when changing branches.
" https://github.com/tmux-plugins/vim-tmux-focus-events makes this work
" in terminal Vim + Tmux
set autoread
" Also re-read a file if we change buffers within Vim
au FocusGained,BufEnter * :checktime

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50    " keep 50 lines of command line history
set ruler         " show the cursor position all the time
set showtabline=2 " Always show tab line even when only one tab is open.
set showcmd       " display incomplete commands
set visualbell    " Don't beep at me when I hit Esc twice

" Turn on syntax highlighting, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Do proper indenting per language.  There is a directory full of indenting
" rules that gets installed with vim, like python.vim and ruby.vim; mine was
" /usr/share/vim/vim72/ftplugin/.
filetype plugin indent on 

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" When creating new files, use a template if we have one in templates/
autocmd BufNewFile * silent! 0r ~/.vim/templates/template.%:e

" If I don't set this, it gets set to inside bundle/ctrlp somehow
set spellfile=~/.dotfiles/vim/spell/en.utf-8.add

" Regenerate binary .add.spl files on startup based on plaintext .add files
for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        exec 'mkspell! ' . fnameescape(d)
    endif
endfor

" put custom executables on the path
let $PATH = expand("~/.dotfiles/bin") . ":" . $PATH

" ****************** SCROLLING *********************  

set scrolloff=8      " Number of lines from vertical edge to start scrolling
set sidescrolloff=15 " Number of cols from horizontal edge to start scrolling
set sidescroll=1     " Number of cols to scroll at a time

" ****************** SPLITTING *********************  
set splitright " vsplit makes new pane to the right (not left)
set splitbelow " split  makes new pane below (not above)

" ****************** SEARCHING *********************  
set incsearch     " do incremental searching
set ignorecase    " do case-insensitive searches
set smartcase     " ... unless the search contains upper-case characters
set hlsearch      " highlight all matched terms
" Pressing return clears highlighted search
" :nnoremap <CR> :nohlsearch<CR>/<BS>
" Pressing control + return also clears (for use in NERDTree)
" :nnoremap <c-CR> :nohlsearch<CR>/<BS>
" Searching for the word under the cursor (forward with * or backward with #)
" doesn't move the cursor initially, only highlights other occurences. The cursor
"doesn't move until you press n or N.

" Pressing enter toggles highlighting of the word under the cursor as if
" you had searched for it and puts it in the search buffer.
" After that, N or n can be used to move through matches.
" From http://vim.wikia.com/wiki/Highlight_all_search_pattern_matches
let g:highlighting = 0
function! Highlighting()
  if g:highlighting == 1 && @/ =~ '^\\<'.expand('<cword>').'\\>$'
    let g:highlighting = 0
    return ":silent nohlsearch\<CR>"
  endif
  let @/ = '\<'.expand('<cword>').'\>'
  let g:highlighting = 1
  return ":silent set hlsearch\<CR>"
endfunction
nnoremap <silent> <expr> <CR> Highlighting()

" <cr> should not only clear highlighted search, but flash the current
" cursor location.
" :nnoremap <CR> :nohlsearch<CR>:set cul cuc<cr>:sleep 50m<cr>:set nocul nocuc<cr>/<BS>

" In many terminal emulators the mouse works just fine, thus enable it.
set mouse=a

" **************** CONVENIENCE MAPPINGS ************  
" Set the leader key to comma (normally, it's "\")
let mapleader = ","

" reload .vimrc
map <leader>rc :source ~/.vimrc<cr>

" copy current relative filename into clipboard
map <leader>n :let @+ = expand("%")<cr>

" copy current absolute filename into clipboard
map <leader>an :let @+ = expand("%:p")<cr>

" nice mapping for switching tabs
map <leader>[ :tabp<CR>
map <leader>] :tabn<CR>

" Ctrl-L recolors the screen when it gets confused.
noremap <c-l> <c-l>:syntax sync fromstart<CR>
inoremap <c-l> <esc><c-l>:syntax sync fromstart<CR>a

" If you type :W<cr>, save anyway.
command! W w

" If you type q: you really meant to type :q .
" q: originally opens a command history window, which you can get to by typing
" :<Ctrl-F> instead.
map q: :q

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

" leader win normal mode saves file. (Pause or other char after the s becomes an insert)
nmap <leader>w :w <CR>

" exits insert mode. push together; doesn't matter which is first.
inoremap jk <Esc>
inoremap kj <Esc>

" ctrl+backspace in insert mode deletes the prior Word (as control+w does the prior word)
" (For discussion, see http://superuser.com/questions/514615)
imap <C-BS> <C-o>vBd

" Change single quoted string to double quotes, keep position using t register
map <leader>" mtcs'"`t

" ***************** TABS ***************************  
" (To overrride these per file type, put commands in .vim/ftplugin/)
set tabstop=2     " visual spaces displayed per tab character
set expandtab     " insert spaces instead of tab characters
set softtabstop=2 " spaces entered when tab key is pressed
set shiftwidth=2  " spaces for auto-intent or <</>>
set smarttab      " backspace over a tab will remove a tab's worth of space

" *********** DISPLAYING HIDDEN CHARACTERS *********
" Beautify display of hidden characters (tabs, line breaks, etc).
" (`:set list!` to toggle display; `:help listchars` for info )
set listchars=nbsp:☠,trail:⋅,tab:▸\ ,eol:¬,extends:❯,precedes:❮

" *************** Tab completion ****************
" src: http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion
" A different approach to completion is here:
" https://github.com/skwp/dotfiles/blob/master/vimrc
let g:omni_support=1

function! Smart_TabComplete()
  let line = getline('.')                         " curline
  let substr = strpart(line, -1, col('.'))        " from start to cursor
  let substr = matchstr(substr, "[^ \t.]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

inoremap <tab> <c-r>=Smart_TabComplete()<CR>


set wildmenu " menu of options for autocomplete in :e som<TAB>

" **************** PLUGINS *************************  
" ************ Pathogen ****************
" Get Pathogen plugin to load other plugins - all files, recursively, from
" the path specified
call pathogen#infect('~/.vim/bundle')

" ************ NERDTree ****************
" Leader f opens NERDTree. Mnemonic: f for "Files"
map <silent> <Leader>f :NERDTreeToggle<CR>

" ************ CtrlP (File Finder) ****************
" - Pressing <control + p> starts it.
" - <ctrl + j/k> moves between matches. 
" - Enter opens. <ctrl + t> opens in same tab (with config below).
" - ctrl+f changes modes. MRU means 'Most Recently Used'. 
" - <ctrl + r> toggles regexp/fuzzy search; regexp is also nice for exact filenames
"
" Open a single file in a new tab by default
let g:ctrlp_prompt_mappings = {'AcceptSelection("e")': ['<c-t>'], 'AcceptSelection("t")': ['<cr>', '2-LeftMouse'], }
" Open new files in a new tab
let g:ctrlp_open_new_file = 't'
" Open multiple files in new tabs and jump to the first one
let g:ctrlp_open_multiple_files = 'tj'
" Search files returned by one of these commands, depending on whether you
" find .git in the directory or not.
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files --cached --exclude-standard --others']
    \ },
  \ 'fallback': 'find %s -type f'
  \ }
let g:ctrlp_working_path_mode = 0 " respect changes in pwd

" Search in pwd, even if current file is located elsewhere
nmap <Leader>p :CtrlP pwd<CR>

" ************** COLOR SCHEME ************
" Set to Solarized colorscheme which works on lots of platforms and looks nice
let g:solarized_termcolors=16
set background=dark
colorscheme solarized
" Let F5 trigger changing Solarized themes
call togglebg#map("<F5>")
syntax enable
" ****************************************


"** When indenting in visual mode, return to visual mode **
" indent with > or tab
vmap > >gv
vmap <tab> >gv
" outdent with < or shift-tab
vmap < <gv
vmap <S-Tab> <gv
" Shift-tab in insert mode is a backspace (unindent)
imap <S-Tab> <BS>

" Use abbreviations defined here
source ~/.vim/abbreviations
source ~/.vim/formatters.vim

" Control+h produces a hashrocket
imap <C-h> <Space>=><Space>

" Always show line numbers
set number

" Move lines up and down
nmap <leader>j :m +1 <CR>
nmap <leader>k :m -2 <CR>

" move vertically by visual line, not actual line (eg if wrapped)
nnoremap j gj
nnoremap k gk

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" Duplicate a selection
" Visual mode: D
vmap D y'>p

" Visually select the text that was last edited/pasted with 'gV'
" (This is based on the standard 'gv', which repeats the last selection)
nnoremap <expr> gV '`[' . strpart(getregtype(), 0, 1) . '`]'

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Syntax checking, etc
" https://github.com/w0rp/ale
let g:ale_elixir_elixir_ls_release = '~/.elixir-ls/rel'

let g:mix_format_elixir_path = '/Users/nathanl/.asdf/shims/mix'
" let g:mix_format_on_save = 1
map <leader>mf :MixFormat<cr>

" Render the current markdown file as HTML
map <leader>md :!md_preview '%'<cr>
" Also open the HTML file
map <leader>mo :!md_preview '%' open<cr>

" SQL format the current file
" (requires `pip install sqlparse` and `asdf reshim`)
map <leader>sql :%!sqlformat --reindent --keywords upper --identifiers lower -<CR>

" add a datestamp or timestamp
map <leader>ds :read !datestamp<cr>
map <leader>ts :read !timestamp<cr>

map <leader>ca :read ~/.dotfiles/git/co-author-template.txt<cr>

" Format Blue Letter Bible quotations as blockquotes with reference at end
map <leader>blb ^"rda[i>V:s/\%V\d\{1,\}\s//g<cr>A ("rpds[A)^

" <crazytown>
" Trust me, this is fine. 😂
" All this is so that ,ak will set up a repeatable macro at @a, which will
" convert elixir string keys to atoms if you start on the opening quotation
map <leader>yy :nohlsearch<CR>/<BS>
map <leader>zz :s/-/_/ge<cr>
map <leader>ak :let @a = 'lvi",zz^xf"r:ldt j^,yy'<cr>
" </crazytown>

" Copy/paste to system clipboard by default
set clipboard=unnamed

" if editing a crontab file, eg `VIM_CRONTAB=true crontab`
if $VIM_CRONTAB == "true"
  set nobackup
  set nowritebackup
endif

" If there are any machine-specific tweaks for Vim, load them from the following file.
try 
  source ~/.vimrc_machine_specific
catch
  " No such file? No problem; just ignore it.
endtry 
