" Canonical version of this file and of the .vim directory is in git
" at git@github.com:nathanl/dotfiles.git
" 
" **************** BASIC SETTINGS ******************  
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
" Captial Q does nothing (instead of entering Ex mode)
nnoremap Q <nop>

" Make Y behave like other capitals - to end of line
map Y y$

" Don't use swap files
set noswapfile

" Put backup files in a central place instead of the current directory.
" Vim will use the first directory that exists.  (see `:help backup`)
set backupdir=/tmp/vim,/tmp,$HOME/Local\ Settings/Temp

" Discard undo history when reloading a file (like `:e!`). For instance,
" I may want to reload after committing and only be able to undo to that point.
try
  set undoreload=0 | edit
catch
  " Pre vim7.3
endtry

" Remove all autocommands, in case we are sourced twice.  That's what vim's
" help says to do if you use autocommands, so I'm doing it.
autocmd!

" Automatically re-read files that have been changed by another program
" (unless there are unsaved changes). Handy when changing branches.
set autoread

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50    " keep 50 lines of command line history
set ruler         " show the cursor position all the time
set showtabline=2 " Always show tab line even when only one tab is open.
set showcmd       " display incomplete commands
set visualbell    " Don't beep at me when I hit Esc twice

" Turn on syntax highlighting, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Do proper indenting per language.  There is a directory full of indenting
" rules that gets installed with vim, like python.vim and ruby.vim; mine was
" /usr/share/vim/vim72/ftplugin/.
filetype plugin indent on 

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" When creating new files, use a template if we have one in templates/
autocmd BufNewFile * silent! 0r ~/.vim/templates/template.%:e

" put custom scripts on the path
let $PATH = expand("~/.dotfiles/scripts") . ":" . $PATH

" ****************** SCROLLING *********************  

set scrolloff=8      " Number of lines from vertical edge to start scrolling
set sidescrolloff=15 " Number of cols from horizontal edge to start scrolling
set sidescroll=1     " Number of cols to scroll at a time

" ****************** SPLITTING *********************  
set splitright " vsplit makes new pane to the right (not left)
set splitbelow " split  makes new pane below (not above)

" ****************** SEARCHING *********************  
set incsearch     " do incremental searching
set ignorecase    " do case-insensitive searches
set smartcase     " ... unless the search contains upper-case characters
set hlsearch      " highlight all matched terms
" Pressing return clears highlighted search
:nnoremap <CR> :nohlsearch<CR>/<BS>
" Pressing control + return also clears (for use in NERDTree)
:nnoremap <c-CR> :nohlsearch<CR>/<BS>

" In many terminal emulators the mouse works just fine, thus enable it.
set mouse=a

" **************** CONVENIENCE MAPPINGS ************  
" Set the leader key to comma (normally, it's "\")
let mapleader = ","

" reload .vimrc
map <leader>rv :source ~/.vimrc<cr>

" Ctrl-L recolors the screen when it gets confused.
noremap <c-l> <c-l>:syntax sync fromstart<CR>
inoremap <c-l> <esc><c-l>:syntax sync fromstart<CR>a

" If you type :W<cr>, save anyway.
command! W w

" If you type q: you really meant to type :q .
" q: originally opens a command history window, which you can get to by typing
" :<Ctrl-F> instead.
map q: :q

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

" leader win normal mode saves file. (Pause or other char after the s becomes an insert)
nmap <leader>w :w <CR>

" kk exits insert mode. (Pause or other char after the k means 'just type this')
inoremap kk <Esc>

" ctrl+backspace in insert mode deletes the prior Word (as control+w does the prior word)
" (For discussion, see http://superuser.com/questions/514615)
imap <C-BS> <C-o>vBd

" Swap order of two comma-separated arguments (mnemonic: 'swap')
" TODO: this really doesn't work well. Maybe try writing it in Ruby?
map <leader>s t,Bdt,wea, pBBdF,

" Change single quoted string to double quotes, keep position using t register
map <leader>" mtcs'"`t

" ***************** TABS ***************************  
" Usually, you want 2 spaces per tab, so these lines make this the default.
" There are ways to make vi do clever things with tabs in different
" situations, like MS Word can, but I *always* want tab to behave the same way
" -- so I set all three of these tab-related values the same.
" (To overrride these per file type, put commands in .vim/ftplugin/)
set tabstop=2
set softtabstop=2
set shiftwidth=2

set expandtab " insert spaces instead of tab characters
set smarttab  " backspace over a tab will remove a tab's worth of space

" *********** DISPLAYING HIDDEN CHARACTERS *********
" Beautify display of hidden characters (tabs, line breaks, etc).
" (`:set list!` to toggle display; `:help listchars` for info )
set listchars=nbsp:‚ò†,trail:‚ãÖ,tab:‚ñ∏\ ,eol:¬¨,extends:‚ùØ,precedes:‚ùÆ
map <leader>l :set list!<CR>

" *************** Tab completion ****************
" src: http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion
" A different approach to completion is here:
" https://github.com/skwp/dotfiles/blob/master/vimrc
let g:omni_support=1

function! Smart_TabComplete()
  let line = getline('.')                         " curline
  let substr = strpart(line, -1, col('.'))        " from start to cursor
  let substr = matchstr(substr, "[^ \t.]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

inoremap <tab> <c-r>=Smart_TabComplete()<CR>

" **************** PLUGINS *************************  
" ************ Pathogen ****************
" Get Pathogen plugin to load other plugins - all files, recursively, from
" the path specified
call pathogen#infect('~/.vim/bundle')

" ************ NERDTree ****************
" Leader f opens NERDTree. Mnemonic: f for "Files"
map <unique> <silent> <Leader>f :NERDTreeToggle<CR>

" ************ CtrlP (File Finder) ****************
" - Pressing <control + p> starts it.
" - <ctrl + j/k> moves between matches. 
" - Enter opens. <ctrl + t> opens in same tab (with config below).
" - ctrl+f changes modes. MRU means 'Most Recently Used'. 
" - <ctrl + r> toggles regexp/fuzzy search; regexp is also nice for exact filenames
"
" Open a single file in a new tab by default
let g:ctrlp_prompt_mappings = {'AcceptSelection("e")': ['<c-t>'], 'AcceptSelection("t")': ['<cr>', '2-LeftMouse'], }
" Open new files in a new tab
let g:ctrlp_open_new_file = 't'
" Open multiple files in new tabs and jump to the first one
let g:ctrlp_open_multiple_files = 'tj'
" Search files returned by one of these commands, depending on whether you
" find .git in the directory or not.
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files --cached --exclude-standard --others']
    \ },
  \ 'fallback': 'find %s -type f'
  \ }

nmap <Leader>p <C-p>

" ************** COLOR SCHEME ************
" Set to Solarized colorscheme which works on lots of platforms and looks nice
syntax enable
set background=dark
" Necessary in mintty for background to be blue, not black, in vim, even
" after setting mintty's terminal colors to solarized's via a script

let g:solarized_termtrans=1
if $TERM_PROGRAM == "Apple_Terminal"
  " for awesome people using vim in apple terminal 
  " (with black background and transparency)
  unlet g:solarized_termtrans
  let g:solarized_termtrans=0
  let g:solarized_termcolors=256
  let g:solarized_visibility="high"
  let g:solarized_contrast="high"
end
set background=dark

" Let F5 trigger changing Solarized themes
call togglebg#map("<F5>")
colorscheme solarized

" <cr> should not only clear highlighted search, but flash the current
" cursor location.
:nnoremap <CR> :nohlsearch<CR>:set cul cuc<cr>:sleep 50m<cr>:set nocul nocuc<cr>/<BS>

" Wrap text at column 78 in text files.  
" In code files this will only apply to comments.
set textwidth=78

"** When indenting in visual mode, return to visual mode **
" indent with > or tab
vmap > >gv
vmap <tab> >gv
" outdent with < or shift-tab
vmap < <gv
vmap <S-Tab> <gv
" Shift-tab in insert mode is a backspace (unindent)
imap <S-Tab> <BS>

" Use abbreviations defined here
source ~/.vim/abbreviations

" Control+h produces a hashrocket
imap <C-h> <Space>=><Space>

" Always show line numbers
set number

" Move lines up and down
nmap <C-J> :m +1 <CR>
nmap <C-K> :m -2 <CR>

" Duplicate a selection
" Visual mode: D
vmap D y'>p

" Visually select the text that was last edited/pasted with 'gV'
" (This is based on the standard 'gv', which repeats the last selection)
nnoremap <expr> gV '`[' . strpart(getregtype(), 0, 1) . '`]'

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Toggle automatic syntax checking.
command! AutoCheck SyntasticToggleMode
" Trigger it manually. `:lclose` closes the location list
command! Check SyntasticCheck

" get jslint from http://javascriptlint.com/
" When writing a file, if there are errors, have Syntastic plugin mark them
" In order to check Javascript files, you must have the `jsl` executable from here
" in your path:
" http://www.javascriptlint.com/download.htm
let g:syntastic_enable_signs=1
let g:syntastic_ruby_exec = '~/.rubies/default/bin/ruby'
let g:syntastic_auto_loc_list=1
let g:syntastic_javascript_checkers=['jsl']
" let g:syntastic_javascript_checkers = ['jslint']
" TODO: eeeeh?? This conf file doesn't exist?
" let g:syntastic_javascript_jsl_args="-conf ~/.vim/bundle/syntastic/syntax_checkers/javascript/jsl.conf -process" " filename will be inserted next
" let g:syntastic_javascript_jsl_args=" " filename will be inserted next

" Elixir file checker executes the code. Unsafe and slow. Disable.
let g:syntastic_enable_elixir_checker = 0

" Open the current Markdown file as HTML for printing
map <leader>md :w !markdown > /tmp/md_output.html && open /tmp/md_output.html<cr>

" Copy/paste to system clipboard by default
set clipboard=unnamed

" If there are any machine-specific tweaks for Vim, load them from the following file.
try 
  source ~/.vimrc_machine_specific
catch
  " No such file? No problem; just ignore it.
endtry 
